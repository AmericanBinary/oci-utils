import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardOpenOption
import java.nio.file.attribute.PosixFilePermissions

plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'com.gradleup.shadow' version '9.2.2'
}

group = 'ab-oci-utils'
version = file('version.txt').text.trim()

// so it can run everywhere else
java {
    sourceCompatibility = JavaVersion.toVersion(21)
    targetCompatibility = JavaVersion.toVersion(21)
    withSourcesJar()
}

repositories {
    mavenCentral()
}

application.mainClass.set('oci_utils.OciHelpersCli')

jar.manifest.attributes(['Implementation-Version': version])

configurations {
    // lombok
    testCompileOnly.extendsFrom(compileOnly)
    testAnnotationProcessor.extendsFrom(annotationProcessor)
}

dependencies {
    annotationProcessor platform('org.springframework.boot:spring-boot-dependencies:3.4.4')
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.4.4')
    implementation platform('org.springframework.cloud:spring-cloud-dependencies:2024.0.0')

    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'info.picocli:picocli:4.7.7'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.7'

    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    // https://mvnrepository.com/artifact/org.ini4j/ini4j
    implementation 'org.ini4j:ini4j:0.5.4'
    // https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-retry
    implementation 'io.github.resilience4j:resilience4j-retry:2.3.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.hamcrest:hamcrest'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile).configureEach { options.compilerArgs.add '-parameters' }

tasks.withType(Test).configureEach { useJUnitPlatform() }

// mockito boilerplate
configurations { mockitoAgent {} }
dependencies {
    mockitoAgent platform('org.springframework.boot:spring-boot-dependencies:3.4.4')
    mockitoAgent("org.mockito:mockito-core") { transitive = false }
}
tasks.withType(Test).configureEach { jvmArgs('-Xshare:off', "-javaagent:${configurations.mockitoAgent.asPath}") }

// copy to latest - shadowJar
tasks.named('shadowJar').configure { finalizedBy('copyShadowJarToLatest') }
tasks.register('copyShadowJarToLatest', Copy) {
    from tasks.shadowJar.outputs.files.singleFile
    into layout.buildDirectory.dir('bins')
    rename '.*', 'oci-utils-latest-all.jar'
}

// copy to latest - zip
tasks.named('build').configure { dependsOn('distZip') }
tasks.named('distZip').configure { finalizedBy('copyDistZipToLatest') }
tasks.register('copyDistZipToLatest', Copy) {
    from tasks.distZip.outputs.files.singleFile
    into layout.buildDirectory.dir('bins')
    rename '.*', 'oci-utils-latest.zip'
}

tasks.named('build').configure { dependsOn('executableJar') }
def executableJar = tasks.register('executableJar') {
    group = 'build'
    description = 'build an executable jar that you can place in your PATH'
    dependsOn 'shadowJar'

    def inputFile = tasks.named('shadowJar').get().outputs.files.singleFile.toPath()
    inputs.file inputFile

    def outputFile = Path.of(String.valueOf(inputFile).replace("-all.jar", "-executable.jar"))
    outputs.file outputFile

    doLast {
        try (var os = Files.newOutputStream(outputFile, StandardOpenOption.CREATE)) {
            os.write('#!/usr/bin/env -S java -jar\n'.getBytes())
            os.write(Files.readAllBytes(inputFile))
            if (outputFile.fileSystem.supportedFileAttributeViews().contains('posix'))
                Files.setPosixFilePermissions(outputFile, PosixFilePermissions.fromString("rwxr-xr-x"))
        }
    }

    finalizedBy 'executableJarToCommand'
}

tasks.register('executableJarToCommand', Copy) {
    from executableJar
    into layout.buildDirectory.dir('bins')
    rename '.*', 'oci-utils'
}

tasks.register('executableJarInstall', Copy) {
    group = 'install'
    description = 'install executable jar'

    from executableJar
    into directoryInPath
    rename '.*', 'oci-utils'
}
